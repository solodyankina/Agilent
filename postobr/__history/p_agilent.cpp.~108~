//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "p_agilent.h"
#include "drv_ag.cpp"
#include <fstream>
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "Chart"
#pragma link "Series"
#pragma link "TeEngine"
#pragma link "TeeProcs"
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button1Click(TObject *Sender)
{
	double dx,dy,X,Y, xreference, xorigin, xincrement, yreference, yorigin, yincrement;
	double amplitude,overshoot,ristime,falltime,ostU,st,ct,spad,a,b,Umax,Umin,minFall,maxFall,
		minRis,maxRis,minAmplit,maxAmplit,maxOvershoot,minOvershoot,minOstU,maxOstU;
	unsigned int size;
	bool bResult;
	double *mydata ;
	unsigned int *mylocal;
	unsigned int mylocal_cnt;
	unsigned int iLastPoint;
	char* filename;
	HANDLE binFile;
	unsigned long n;
	AnsiString str_date;
	AnsiString str_time;
    BOOL bFindWaveEnd = false;
	char* buf=new char[1000];
	int i,j;
	ofstream f;
	char* FileName_html;
	FileName_html = EditFileHtml->Text.t_str();

	int flen;
	AnsiString file_name = FileName_html;
	Label1->Visible=true;
	AnsiString imege_name = ExtractFileName(FileName_html);
	filename=EditFileName->Text.t_str();
	binFile = CreateFile(filename, GENERIC_READ, FILE_SHARE_READ, NULL,
		OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
	if (binFile == INVALID_HANDLE_VALUE)
		return;
	//MyCreateBin(filename,xreference,xorigin,xincrement,size,mydata) ;
	//создаем отчет из bin файла
	f.open(FileName_html);
	f << "<head>" << "\n" << "<meta http-equiv=Content-Type content=" <<
		"text/html; charset=windows-1251" << "></head>";
	// data
	bResult = ReadFile(binFile,&buf[0],10,&n,NULL) ;
	if ((bResult == FALSE) || (n == 0))
	{
	   ShowMessage("Невозможно считать дату из файла");
	   return;
	}
	buf[10]='\0';
	str_date = buf;
	// time;
	bResult = ReadFile(binFile,&buf[0],8,&n,NULL) ;
	if ((bResult == FALSE) || (n == 0))
	{
	   ShowMessage("Невозможно считать время из файла");
	   return;
	}
	buf[8]='\0';
	str_time = buf;
	f << "<p>" << str_date.c_str() <<" / "<< str_time.c_str() << "</p>";
	//считываем  параметры из bin айла
	// xreferense
	bResult = ReadFile(binFile,&xreference,sizeof(double),&n,NULL);
	if ((bResult == FALSE) || (n == 0))
	{
		ShowMessage("Невозможно считать xreference из файла");
			return;
	}
	// xorigin
	bResult = ReadFile(binFile,&xorigin,sizeof(double),&n,NULL);
	if ((bResult == FALSE) || (n == 0))
	{
		ShowMessage("Невозможно считать xorigin из файла");
			return;
	}
	// xincrement
	bResult = ReadFile(binFile,&xincrement,sizeof(double),&n,NULL);
	if ((bResult == FALSE) || (n == 0))
	{
		ShowMessage("Невозможно считать xincrement из файла");
			return;
	}

	// size
	bResult = ReadFile(binFile,&size,sizeof(unsigned int),&n,NULL);
	if ((bResult == FALSE) || (n == 0))
	{
		ShowMessage("Невозможно считать size из файла");
			return;
	}
	// mydata
	mydata = new double[size];
	bResult = ReadFile(binFile,&mydata[0],size*sizeof(double),&n,NULL);
	if ((bResult == FALSE) || (n == 0))
	{
		ShowMessage("Невозможно считать mydata из файла");
			return;
	}

	// используем считанные данные ---------------------------------------------
	mylocal = new unsigned int[size];
	double max =mydata[0];
	double min =mydata[0];
	//смотрим точеи графика
	mylocal_cnt=1;
	mydata[0] = 0;
	for (int i = 2; i < size-2; i++)
	{
		if ((mydata[i]-mydata[i-1])*(mydata[i+1]-mydata[i])<=0)
		{
			mylocal_cnt = mylocal_cnt+1;
			mylocal[mylocal_cnt - 1] = i;
		}
		if (max<mydata[i])
			max = mydata[i];
		if (min>mydata[i])
			min = mydata[i];
	}
	if (size>1)
	{
		mylocal[mylocal_cnt] = size-1;
		mylocal_cnt++;
		if (max<mydata[size-1])
			max = mydata[size-1];
		if (min>mydata[size-1])
		min = mydata[size-1];
	 }
	// расчитываем характеристики
	iLastPoint = mylocal_cnt-1;
	for ( i = mylocal_cnt-1; i > 0 ; i--)
	{
		if (fabsl(mydata[mylocal[i]] - mydata[mylocal[mylocal_cnt-1]]) > deviation)
			break;
	}
	if ((mylocal[mylocal_cnt-1]-mylocal[i+1])*xincrement > timeT)
	{
		bFindWaveEnd = true;
		iLastPoint = i+1;
	}
    Umax=0; Umin=0;
				minRis=300; maxRis=0;
				minFall=300; maxFall=0;
				minOstU=300; maxOstU=0;
				minAmplit=300; maxAmplit=0;
				maxOvershoot=0; minOvershoot=300;
				overshoot = 0;
				// если не конец сигнала
				for (i = 1; i < iLastPoint; i++)
				{
				//f<<"Y2: " << mydata[mylocal[i]]<<"\n";
				// если перепад разного знака
					if (((mydata[mylocal[i]]*mydata[mylocal[i+1]])<=0)&&(fabsl(mydata[mylocal[i+1]])>=0.3))
					{
						if (i>mylocal_cnt-3)
							continue;
						//среднее значение напряжения пика
						X =( mydata[mylocal[i+1]]+ mydata[mylocal[i+2]])/2;
						if (X>=0)
							Umax = X;
						else
							Umin = X;
						if (fabsl(mydata[mylocal[i]])<0.3)
							continue;
						//амплитуда 18-27В
						amplitude = Umax-Umin;
						if (minAmplit>amplitude)
							minAmplit=fabsl(amplitude);
						if (maxAmplit<amplitude)
							maxAmplit=amplitude;
						//bMeasured = 1;
						//определяем нарастание и спад  100-300нс
						a = (mydata[mylocal[i]]-mydata[mylocal[i+1]])/((double)mylocal[i]-(double)mylocal[i+1]);
						b = mydata[mylocal[i]] - a*mylocal[i];
						spad = ((Umin + 0.1*(Umax - Umin)-b)/a-(Umin + 0.9*(Umax - Umin)-b)/a)*xincrement;
						if (mydata[mylocal[i]]>0)
						{
							falltime=spad; //спад
							if (minFall>spad)
								minFall=spad;
							if (maxFall<spad)
								maxFall=spad;
						}
						if (mydata[mylocal[i]]<0)
						{
							ristime=spad; //нарастание
							if (minRis>fabsl(spad))
								minRis=fabsl(spad);
							if (maxRis<fabsl(spad))
								maxRis=fabsl(spad);
						}
					}//if
					//выбросы на вершине +-900мВ(перепад одного знака)
					if (((mydata[mylocal[i]]*mydata[mylocal[i+1]])>=0)&&
						(fabsl(mydata[mylocal[i+1]])>=0.3))
					{
						if ((mydata[mylocal[i]]>=Umax)&& (Umax!=0))
						{
							if (overshoot < mydata[mylocal[i]] - Umax)
								overshoot = mydata[mylocal[i]] - Umax;
						}
						else
						if ((mydata[mylocal[i]]<=Umin)&&(Umin!=0))
						{
							if (overshoot < fabsl(mydata[mylocal[i]] - Umin))
								overshoot = fabsl(mydata[mylocal[i]] - Umin);
						}
					}
					else
					if (fabsl(overshoot)>1E-200)
					{
						if (minOvershoot>overshoot)
							minOvershoot=overshoot;
						if (maxOvershoot<overshoot)
							maxOvershoot=overshoot;
						overshoot  = 0;
					}
				}//for
				max = max + 0.05*(max - min);
				min = min - 0.05*(max - min);
				//если конец сигнала,считаем остаточное напряжение
				ostU = 0;
				if (bFindWaveEnd == true)
				{
					for (int i = mylocal_cnt-1; i >iLastPoint; i--)
					{
						if ((ostU<mydata[mylocal[i]])&& (fabsl(mydata[mylocal[i+1]])>=0.3))
							ostU = mydata[mylocal[i]];
						if (minOstU>ostU)
						{
							minOstU=ostU;
						}
						if (maxOstU<ostU)
						{
							maxOstU=ostU;
						}
					}
				}

	// делаем картинку
	Graphics::TBitmap *MyBitmap = new Graphics::TBitmap(); // для создания картинки
	MyBitmap->Width = 800;  // ширина и высота
	MyBitmap->Height = 400;
	max = max + 0.05*(max - min);
	min = min - 0.05*(max - min);
   //	str = ExtractFileDir(file_name) + "\\" + "im" + ".bmp";
	//MyCreateBitMap(MyBitmap,str, mydata, size,max,min);
	// формируем отчет
	Drv_SetTypeCon(Agilent_TypeCon_Direct);
	if ((Check_Range(maxAmplit,minA,maxA)==0)||(Check_Range(minAmplit,minA,maxA)==0)
					||(Check_Range(maxOvershoot,0,maxOv)==0)||(Check_Range(minOvershoot,0,minOv)==0)
					||(Check_Range(maxRis,minR,maxR)==0)||(Check_Range(minRis,minR,maxR)==0)
					||(Check_Range(maxFall,minF,maxF)==0)||(Check_Range(minFall,minF,maxF)==0)
					||(Check_Range(maxOstU,0,maxOU)==0)||(Check_Range(minOstU,0,maxOU)==0))
				{
					AnsiString str_date = DateToStr(Now());
					AnsiString str_time = TimeToStr(Now());
					f << "<head>" << "\n" << "<meta http-equiv=Content-Type content=" <<
						"text/html; charset=windows-1251" << "></head>";
					str = file_name + "\\" + "im" + ".bmp";
					MyCreateBitMap(MyBitmap,str, mydata, size,max,min);
					j++;
					//заполняем документ
					f<<"<p align=center><img src="<< str.c_str()<<"></p>"<<"\n"<<"</body></html>";
					f<< "<table border="<<"1"<<"><tr><td>"<<"Измерение"<<"</td><td>"<<"MIN"<<"</td><td>"<<"MAX"<<"</td><td>"<<"Норма"<<"</td></tr>";
					if ((Check_Range(maxAmplit,minA,maxA)==0)||(Check_Range(minAmplit,minA,maxA)==0))
					{
						f<< "<tr><td> Амплитуда (В)</td><td> "<<minAmplit<<" </td><td> "<<maxAmplit<<" </td><td> 6 - 9 B</td></tr> ";
					}
					if ((Check_Range(maxOvershoot,minOv,maxOv)==0)||(Check_Range(minOvershoot,minOv,maxOv)==0)) {
						f<< "<tr><td> Колебания (В) </td><td> "<<minOvershoot<<" </td><td>"<<maxOvershoot<<"</td><td> 0..0.3 B</td></tr>";
					}
					if ((Check_Range(maxRis,minR,maxR)==0)||(Check_Range(minRis,minR,maxR)==0)) {
						f<< "<tr><td> Нарастание фронта (нс) </td><td> "<<minRis*1000000000<<" </td><td>"<<maxRis*1000000000<<"</td><td> 100 - 300 нс </td></tr>";
					}
					if ((Check_Range(maxFall,minF,maxF)==0)||(Check_Range(minFall,minF,maxF)==0)) {
						f<< "<tr><td> Спад фронта (нс) </td><td> "<<minFall*1000000000<<" </td><td>"<<maxFall*1000000000<<"</td><td> 100 - 300 нс </td></tr>";
					}
					if (bFindWaveEnd == true){
						if ((Check_Range(maxOstU,0,maxOU)==0)||(Check_Range(minOstU,0,maxOU)==0)) {
						f<< "<tr><td> Остаточное напряжение (В) </td><td> "<<minOstU<<" </td><td>"<<maxOstU<<"</td><td>  0..0.9 B</td></tr>";
						}
					}
					f<<"</table>";
				} // if от условия с ошибками
	f<<"<p align=center><img src="<< str.c_str()<<"></p>"<<"\n"<<"</body></html>";
    MyBitmap->Free();
	f.close();
}
//---------------------------------------------------------------------------

void __fastcall TForm1::SpeedButton1Click(TObject *Sender)
{
	OpenDialog1->Filter = "*.bin;*.b8;*.b16;*.b24;*.b32|*.bin;*.b8;*.b16;*.b24;*.b32";
	OpenDialog1->Execute();
	EditFileName->Text = OpenDialog1->FileName;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::SpeedButton2Click(TObject *Sender)
{
	OpenDialog2->Execute();
	EditFileHtml->Text = OpenDialog2->FileName;
}
//---------------------------------------------------------------------------

